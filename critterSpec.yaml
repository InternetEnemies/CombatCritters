components:
  parameters:
    vendorid:
      name: vendorid
      in: path
      required: true
      schema:
        type: string
    offerid:
      name: offerid
      in: path
      required: true
      schema:
        type: string
    userid:
      name: userid
      in: path
      required: true
      schema:
        type: string
  schemas:
    Card:
      properties:
        cardid:
          type: integer
        description:
          type: string
        image:
          format: uri
          type: string
        name:
          type: string
        playcost:
          type: integer
        rarity:
          type: integer
        type:
          enum:
            - critter
            - item
        type_specific:
          anyOf:
            - $ref: "#/components/schemas/CardCritter"
            - $ref: "#/components/schemas/CardItem"
          oneOf:
            - type: object
          type: object
      required:
        - name
        - playcost
        - rarity
        - image
        - type
        - type_specific
        - description
      title: Card
      type: object
    CardCritter:
      properties:
        abilities:
          items:
            type: integer
          type: array
        damage:
          type: integer
        health:
          type: integer
      required:
        - damage
        - health
        - abilities
      title: CardCritter
      type: object
    CardItem:
      properties:
        abilityid:
          type: integer
      required:
        - abilityid
      title: CardItem
      type: object
    Deck:
      properties:
        cards:
          description: ordered list of cards in the deck
          items:
            type: integer
          type: array
      required:
        - cards
      title: Deck
      type: object
    DeckDetails:
      properties:
        deckid:
          type: integer
        name:
          type: string
      required:
        - name
      title: DeckDetails
      type: object
    DeckRules:
      properties:
        limit_epic:
          type: integer
        limit_item:
          type: integer
        limit_legend:
          type: integer
        limit_rare:
          type: integer
        max_cards:
          type: integer
        min_cards:
          type: integer
      required:
        - min_cards
        - max_cards
        - limit_legend
        - limit_epic
        - limit_rare
        - limit_item
      title: DeckRules
      type: object
    DeckValidity:
      properties:
        issues:
          description: list of issues if the deck is invalid
          items:
            type: string
          type: array
        isvalid:
          type: boolean
      required:
        - isvalid
      title: DeckValidity
      type: object
    Friends:
      description: array of friends user ids
      items:
        $ref: "#/components/schemas/User"
        type: object
      title: Friends
      type: array
    LoginDetails:
      properties:
        password:
          type: string
        username:
          type: string
      required:
        - username
        - password
      title: LoginDetails
      type: object
    Pack:
      properties:
        image:
          format: uri
          type: string
        name:
          type: string
        packid:
          type: integer
      required:
        - name
        - image
      title: Pack
      type: object
    PackCardSlot:
      properties:
        rarityWeights:
          items:
            properties:
              rarity:
                type: integer
              weight:
                description: |-
                  weights for each rarity will be summed,
                  the proportion of the total will be the
                  probablity of getting a card with that rarity

                  missing rarities will assume a weight of 0
                type: number
            required:
              - rarity
              - weight
            type: object
          type: array
      required:
        - rarityWeights
      title: PackCardSlot
      type: object
    PackContents:
      items:
        $ref: "#/components/schemas/Card"
      type: array
    PackCreator:
      properties:
        contents:
          description: |
            array of card ids
          items:
            type: integer
          type: array
        pack_details:
          $ref: "#/components/schemas/Pack"
        slots:
          description: ordered list of card slots
          items:
            $ref: "#/components/schemas/PackCardSlot"
          type: array
      required:
        - contents
      title: PackCreator
      type: object
    PackResult:
      properties:
        cards:
          items:
            $ref: "#/components/schemas/Card"
          type: array
      title: PackResult
      type: object
    Profile:
      properties:
        featured_deck:
          $ref: "#/components/schemas/DeckDetails"
      title: Profile
      type: object
    RegisterDetails:
      properties:
        password:
          type: string
        username:
          type: string
      required:
        - username
        - password
      title: RegisterDetails
      type: object
    User:
      examples:
        - dateOfBirth: 1997-10-31
          email: alice.smith@gmail.com
          emailVerified: true
          firstName: Alice
          id: 142
          lastName: Smith
          signUpDate: 2019-08-24
      properties:
        userid:
          type: integer
        username:
          type: string
      required:
        - username
      title: User
      type: object
    Vendor:
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
        reputation:
          $ref: "#/components/schemas/VendorRep"
      required:
        - name
        - id
        - reputation
    OfferItem:
      type: object
      properties:
        type:
          type: string
        item:
          type: integer
      required:
        - type
        - cost
        - item
    Offer:
      type: object
      properties:
        give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
        receive:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
        id:
          type: integer
      required:
        - give
        - receive
    Wallet:
      type: object
      properties:
        coins:
          type: integer
      required:
        - coins
    RepChange:
      type: object
      properties:
        vendor:
          type: integer
        amount:
          type: integer
      required:
        - vendor
        - amount
    VendorRep:
      type: object
      properties:
        level:
          type: integer
        next:
          type: integer
        prev:
          type: integer
        current_xp:
          type: integer
      required:
        - level
        - xp
        - next
        - prev
        - current
        - current_xp
    OfferDiscount:
      type: object
      properties:
        discount:
          type: integer
        dicounted_give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
        parent_offer:
          $ref: "#/components/schemas/Offer"
        discountid:
          type: integer
        expires:
          type: string
      required:
        - discount
        - dicounted_give
        - parent_offer
        - discountid
        - expiry
        - expires
        - expires
    " OfferDiscountCreate":
      type: object
      properties:
        discount:
          type: integer
        dicounted_give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
        offerid:
          type: integer
      required:
        - offerid
        - dicounted_give
        - discount
      x-fiddle-dto-info:
        baseSchemaName: OfferDiscount
info:
  summary: ""
  title: critterSpec
  version: 0.2.0
  x-fiddle-import-file: true
openapi: 3.1.0
paths:
  /cards:
    get:
      operationId: get-cards
      parameters:
        - description: (optional) array of card ids to get
          in: query
          name: id
          schema:
            items:
              type: integer
            type: array
        - description: order of the cards
          in: query
          name: order
          schema:
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
            type: string
        - description: rarities
          in: query
          name: rarities
          schema:
            items:
              type: number
            type: array
        - description: filter by less than cost
          in: query
          name: costLess
          schema:
            type: boolean
        - description: cost to filter by
          in: query
          name: cost
          schema:
            type: number
        - description: set high to only include the rarities set
          in: query
          name: rarityInclude
          schema:
            type: boolean
        - description: show only owned cards
          in: query
          name: owned
          schema:
            type: string
      requestBody:
        content: {}
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Card"
                title: GetCardsOk
                type: array
          description: OK
      summary: Get cards
      tags:
        - cards
  /cards/{cardid}:
    get:
      operationId: get-cards-cardid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
                type: object
          description: OK
      summary: Get a card by its id
      tags:
        - cards
    parameters:
      - in: path
        name: cardid
        required: true
        schema:
          type: string
  /decks/validity:
    get:
      operationId: get-decks-validity
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckRules"
                type: object
          description: OK
      summary: Get the deck validity rules object
      tags:
        - decks
  /packs:
    get:
      operationId: get-packs
      parameters:
        - description: show owned packs only?
          in: query
          name: owned
          schema:
            type: boolean
        - description: array of packid's to get
          in: query
          name: packid
          schema:
            items:
              type: integer
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Pack"
                title: GetPacksOk
                type: array
          description: OK
      summary: Get the list of packs
      tags:
        - packs
    post:
      operationId: post-packs
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pack"
                type: object
          description: Created
      summary: Create new pack
      tags:
        - packs
  /packs/{packid}:
    get:
      operationId: get-packs-packid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pack"
                type: object
          description: OK
      summary: get a pack from it's id
      tags:
        - packs
    parameters:
      - in: path
        name: packid
        required: true
        schema:
          type: string
  /packs/{packid}/contents:
    get:
      operationId: get-packs-packid-contents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackContents"
          description: OK
      summary: get pack contents
      tags:
        - packs
    parameters:
      - in: path
        name: packid
        required: true
        schema:
          type: string
  /users/{cardid}/decks/{deckid}/validity:
    get:
      operationId: get-users-cardid-decks-deckid-validity
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckValidity"
                type: object
          description: OK
      summary: get the validity object for a deck
      tags:
        - decks
    parameters:
      - in: path
        name: cardid
        required: true
        schema:
          type: string
      - in: path
        name: deckid
        required: true
        schema:
          type: string
  /users/{userid}/cards:
    get:
      operationId: get-users-userid-cards
      parameters:
        - description: (optional) array of card ids to get
          in: query
          name: id
          schema:
            items:
              type: integer
            type: array
        - description: order of the cards
          in: query
          name: order
          schema:
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
            type: string
        - description: set high to only include rarities in set
          in: query
          name: rarityInclude
          schema:
            type: boolean
        - description: show cards with cost less than cost
          in: query
          name: costLess
          schema:
            type: boolean
        - description: cost of cards to filter by
          in: query
          name: cost
          schema:
            type: number
        - description: list of rarities
          in: query
          name: rarities
          schema:
            items:
              type: number
            type: array
        - description: show only owned cards
          in: query
          name: owned
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    count:
                      type: integer
                    item:
                      $ref: "#/components/schemas/Card"
                  type: object
                title: GetUsersUseridCardsOk
                type: array
          description: OK
      summary: get the cards in the users inventory
      tags:
        - cards
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
  /users/{userid}/decks:
    get:
      operationId: get-users-userid-decks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DeckDetails"
                title: GetUsersUseridDecksOk
                type: array
          description: OK
      summary: Get a list of a users decks
      tags:
        - decks
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
    post:
      operationId: post-users-userid-decks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeckDetails"
              type: object
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckDetails"
                type: object
          description: Created
      summary: Create a new deck
      tags:
        - decks
  /users/{userid}/decks/{deckid}:
    delete:
      operationId: delete-users-userid-decks-deckid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckDetails"
                type: object
          description: OK
      summary: Delete a deck
      tags:
        - decks
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
      - in: path
        name: deckid
        required: true
        schema:
          type: string
  /users/{userid}/decks/{deckid}/cards:
    get:
      operationId: get-users-userid-decks-deckid-cards
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Card"
                title: GetUsersUseridDecksDeckidCardsOk
                type: array
          description: OK
      summary: Get the cards in a deck
      tags:
        - decks
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
      - in: path
        name: deckid
        required: true
        schema:
          type: string
    put:
      operationId: put-users-userid-decks-deckid-cards
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deck"
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  deck:
                    $ref: "#/components/schemas/Deck"
                  deck_validity:
                    $ref: "#/components/schemas/DeckValidity"
                title: PutUsersUseridDecksDeckidCardsOk
                type: object
          description: OK
      summary: Update the contents of a deck
      tags:
        - decks
  /users/{userid}/friends:
    get:
      operationId: get-users-userid-friends
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsOk
                type: array
          description: OK
      summary: get a users friends
      tags:
        - friends
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
    post:
      operationId: post-users-userid-friends
      requestBody:
        content:
          application/json:
            schema:
              properties:
                username:
                  type: string
              type: object
      responses: {}
      summary: add friend
      tags:
        - friends
  /users/{userid}/friends/pending:
    get:
      operationId: get-users-userid-friends-pending
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsPendingOk
                type: array
          description: OK
      summary: get pending friend requests
      tags:
        - friends
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
  /users/{userid}/packs:
    get:
      operationId: get-users-userid-packs
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties:
                    count:
                      type: integer
                    item:
                      $ref: "#/components/schemas/Pack"
                  type: object
                title: GetUsersUseridPacksOk
                type: array
          description: OK
      summary: Get the packs in the users inventory
      tags:
        - packs
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
  /users/{userid}/packs/{packid}:
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
      - in: path
        name: packid
        required: true
        schema:
          type: string
    post:
      operationId: post-users-userid-packs-packid
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackResult"
                type: object
          description: OK
      summary: open the pack from its id
      tags:
        - packs
  /users/{userid}/profile:
    get:
      operationId: get-users-userid-profile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
                type: object
          description: OK
      summary: Get a users profile
      tags:
        - profiles
    parameters:
      - in: path
        name: userid
        required: true
        schema:
          type: string
    put:
      operationId: put-users-userid-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
              type: object
      responses:
        "200":
          content: {}
          description: OK
      summary: update a users profile
      tags:
        - profiles
  /users/auth/logout:
    post:
      operationId: logout
      responses: {}
      summary: Logout
      tags:
        - auth
      parameters: []
  /users/auth/login:
    post:
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDetails"
              type: object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                type: object
          description: OK
      summary: Login
      tags:
        - auth
      parameters: []
  /users/auth/register:
    post:
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDetails"
              type: object
      responses: {}
      summary: Register
      tags:
        - auth
      parameters: []
  /vendors:
    get:
      operationId: getVendors
      tags:
        - market
      summary: Get vendors
      responses:
        "200":
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vendor"
  /vendors/{vendorid}/offers:
    get:
      operationId: getAVendorsOffers
      tags:
        - market
      summary: get a vendors offers
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "200":
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"
    post:
      operationId: createNewOffer
      tags:
        - market
      summary: create new offer
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "201":
          description: Created - Resource successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
  /vendors/{vendorid}/offers/{offerid}:
    post:
      operationId: purchaseVendorOffer
      tags:
        - market
      summary: purchase vendor offer
      parameters:
        - $ref: "#/components/parameters/vendorid"
        - $ref: "#/components/parameters/offerid"
      responses:
        "200":
          description: Offer Purchased
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepChange"
  /users/{userid}/wallet:
    get:
      operationId: getTheUsersWallet
      tags:
        - walllet
      summary: get the users wallet
      parameters:
        - $ref: "#/components/parameters/userid"
      responses:
        "200":
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
      description: by force
  /vendors/{vendorid}/discounts:
    get:
      operationId: getDiscounts
      tags:
        - market
      summary: get discounts
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "200":
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferDiscount"
    post:
      operationId: addNewDiscount
      tags:
        - market
      summary: add new discount
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "201":
          description: Created - Resource successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferDiscount"
      requestBody:
        required: true
        description: Discount creator
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ OfferDiscountCreate"
  /vendors/{vendorid}/specials:
    get:
      operationId: getSpecialOffers
      tags:
        - market
      summary: get special offers
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "200":
          description: OK - Successful request with response body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
    post:
      operationId: addNewSpecial
      tags:
        - market
      summary: add new special
      parameters:
        - $ref: "#/components/parameters/vendorid"
      responses:
        "201":
          description: Created - Resource successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
      requestBody:
        required: true
        description: ""
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
servers:
  - url: http://localhost:8080
  - url: http://api.combatcritters.ca:4000
tags:
  - name: cards
  - name: decks
  - name: packs
  - name: profiles
  - name: friends
  - name: auth
  - name: market
  - name: walllet
