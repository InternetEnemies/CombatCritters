openapi: 3.1.0
info:
  title: critterSpec
  version: 0.1.3
  summary: ""
  x-fiddle-import-file: true
servers:
  - url: http://localhost:8080
  - url: http://api.combatcritters.ca:4000
paths:
  /cards:
    get:
      summary: Get cards
      tags:
        - cards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
                title: GetCardsOk
      operationId: get-cards
      requestBody:
        content: {}
      parameters:
        - schema:
            type: array
            items:
              type: integer
          in: query
          name: id
          description: (optional) array of card ids to get
        - schema:
            type: string
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
          in: query
          name: order
          description: order of the cards
        - schema:
            type: array
            items:
              type: number
          in: query
          name: rarities
          description: rarities
        - schema:
            type: boolean
          in: query
          name: costLess
          description: filter by less than cost
        - schema:
            type: number
          in: query
          name: cost
          description: cost to filter by
        - schema:
            type: boolean
          in: query
          name: rarityInclude
          description: set high to only include the rarities set
        - schema:
            type: string
          in: query
          name: owned
          description: show only owned cards
  /cards/{cardid}:
    parameters:
      - schema:
          type: string
        name: cardid
        in: path
        required: true
    get:
      summary: Get a card by its id
      tags:
        - cards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Card"
      operationId: get-cards-cardid
  /users/{userid}/cards:
    get:
      summary: get the cards in the users inventory
      parameters:
        - schema:
            type: array
            items:
              type: integer
          in: query
          name: id
          description: (optional) array of card ids to get
        - schema:
            type: string
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
          in: query
          name: order
          description: order of the cards
        - schema:
            type: boolean
          in: query
          name: rarityInclude
          description: set high to only include rarities in set
        - schema:
            type: boolean
          in: query
          name: costLess
          description: show cards with cost less than cost
        - schema:
            type: number
          in: query
          name: cost
          description: cost of cards to filter by
        - schema:
            type: array
            items:
              type: number
          in: query
          name: rarities
          description: list of rarities
        - schema:
            type: string
          in: query
          name: owned
          description: show only owned cards
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    item:
                      $ref: "#/components/schemas/Card"
                title: GetUsersUseridCardsOk
      operationId: get-users-userid-cards
      tags:
        - cards
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
  /users/{userid}/decks:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: Get a list of a users decks
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeckDetails"
                title: GetUsersUseridDecksOk
      operationId: get-users-userid-decks
    post:
      summary: Create a new deck
      tags:
        - decks
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/DeckDetails"
      operationId: post-users-userid-decks
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/DeckDetails"
  /users/{userid}/decks/{deckid}:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
      - schema:
          type: string
        name: deckid
        in: path
        required: true
    delete:
      summary: Delete a deck
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/DeckDetails"
      operationId: delete-users-userid-decks-deckid
  /users/{userid}/decks/{deckid}/cards:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
      - schema:
          type: string
        name: deckid
        in: path
        required: true
    get:
      summary: Get the cards in a deck
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
                title: GetUsersUseridDecksDeckidCardsOk
      operationId: get-users-userid-decks-deckid-cards
    put:
      summary: Update the contents of a deck
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  deck:
                    $ref: "#/components/schemas/Deck"
                  deck_validity:
                    $ref: "#/components/schemas/DeckValidity"
                title: PutUsersUseridDecksDeckidCardsOk
      operationId: put-users-userid-decks-deckid-cards
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Deck"
      parameters: []
  /packs:
    get:
      summary: Get the list of packs
      tags:
        - packs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pack"
                title: GetPacksOk
      operationId: get-packs
      parameters:
        - schema:
            type: boolean
          in: query
          name: owned
          description: show owned packs only?
        - schema:
            type: array
            items:
              type: integer
          in: query
          name: packid
          description: array of packid's to get
    post:
      summary: Create new pack
      tags:
        - packs
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Pack"
      operationId: post-packs
  /packs/{packid}:
    parameters:
      - schema:
          type: string
        name: packid
        in: path
        required: true
    get:
      summary: get a pack from it's id
      tags:
        - packs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Pack"
      operationId: get-packs-packid
  /users/{userid}/packs:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: Get the packs in the users inventory
      tags:
        - packs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    count:
                      type: integer
                    item:
                      $ref: "#/components/schemas/Pack"
                title: GetUsersUseridPacksOk
      operationId: get-users-userid-packs
  /users/{userid}/packs/{packid}:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
      - schema:
          type: string
        name: packid
        in: path
        required: true
    post:
      summary: open the pack from its id
      tags:
        - packs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/PackResult"
      operationId: post-users-userid-packs-packid
  /users/{cardid}/decks/{deckid}/validity:
    parameters:
      - schema:
          type: string
        name: cardid
        in: path
        required: true
      - schema:
          type: string
        name: deckid
        in: path
        required: true
    get:
      summary: get the validity object for a deck
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/DeckValidity"
      operationId: get-users-cardid-decks-deckid-validity
  /decks/validity:
    get:
      summary: Get the deck validity rules object
      tags:
        - decks
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/DeckRules"
      operationId: get-decks-validity
  /users/auth/login:
    post:
      summary: Login
      tags:
        - Auth
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/User"
      operationId: postLogin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/LoginDetails"
  /users/auth/register:
    post:
      summary: Register
      tags:
        - Auth
      responses: {}
      operationId: post-users-auth-register
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/RegisterDetails"
  /users/auth/logout:
    post:
      summary: Logout
      tags: []
      responses: {}
      operationId: post-users-auth-logout
  /users/{userid}/profile:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: Get a users profile
      tags:
        - profiles
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                $ref: "#/components/schemas/Profile"
      operationId: get-users-userid-profile
    put:
      summary: update a users profile
      tags:
        - profiles
      responses:
        "200":
          description: OK
          content: {}
      operationId: put-users-userid-profile
      requestBody:
        content:
          application/json:
            schema:
              type: object
              $ref: "#/components/schemas/Profile"
  /users/{userid}/friends:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: get a users friends
      tags:
        - friends
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsOk
      operationId: get-users-userid-friends
    post:
      summary: add friend
      tags:
        - friends
      responses: {}
      operationId: post-users-userid-friends
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
  /users/{userid}/friends/pending:
    parameters:
      - schema:
          type: string
        name: userid
        in: path
        required: true
    get:
      summary: get pending friend requests
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsPendingOk
      operationId: get-users-userid-friends-pending
      tags:
        - friends
  /packs/{packid}/contents:
    parameters:
      - schema:
          type: string
        name: packid
        in: path
        required: true
    get:
      summary: get pack contents
      tags:
        - packs
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackContents"
      operationId: get-packs-packid-contents
components:
  schemas:
    User:
      title: User
      type: object
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: 1997-10-31
          emailVerified: true
          signUpDate: 2019-08-24
      required:
        - username
      properties:
        userid:
          type: integer
        username:
          type: string
    Card:
      title: Card
      type: object
      required:
        - name
        - playcost
        - rarity
        - image
        - type
        - type_specific
        - description
      properties:
        cardid:
          type: integer
        name:
          type: string
        playcost:
          type: integer
        rarity:
          type: integer
        image:
          type: string
          format: uri
        type:
          enum:
            - critter
            - item
        type_specific:
          anyOf:
            - $ref: "#/components/schemas/CardCritter"
            - $ref: "#/components/schemas/CardItem"
          oneOf:
            - type: object
          type: object
        description:
          type: string
    CardCritter:
      title: CardCritter
      type: object
      required:
        - damage
        - health
        - abilities
      properties:
        damage:
          type: integer
        health:
          type: integer
        abilities:
          type: array
          items:
            type: integer
    CardItem:
      title: CardItem
      type: object
      required:
        - abilityid
      properties:
        abilityid:
          type: integer
    DeckDetails:
      title: DeckDetails
      type: object
      required:
        - name
      properties:
        deckid:
          type: integer
        name:
          type: string
    Deck:
      title: Deck
      type: object
      required:
        - cards
      properties:
        cards:
          type: array
          description: ordered list of cards in the deck
          items:
            type: integer
    Pack:
      title: Pack
      type: object
      required:
        - name
        - image
      properties:
        packid:
          type: integer
        name:
          type: string
        image:
          type: string
          format: uri
    PackResult:
      title: PackResult
      type: object
      properties:
        cards:
          type: array
          items:
            $ref: "#/components/schemas/Card"
    PackContents:
      type: array
      items:
        $ref: "#/components/schemas/Card"
    DeckValidity:
      title: DeckValidity
      type: object
      required:
        - isvalid
      properties:
        isvalid:
          type: boolean
        issues:
          type: array
          description: list of issues if the deck is invalid
          items:
            type: string
    DeckRules:
      title: DeckRules
      type: object
      required:
        - min_cards
        - max_cards
        - limit_legend
        - limit_epic
        - limit_rare
        - limit_item
      properties:
        min_cards:
          type: integer
        max_cards:
          type: integer
        limit_legend:
          type: integer
        limit_epic:
          type: integer
        limit_rare:
          type: integer
        limit_item:
          type: integer
    LoginDetails:
      title: LoginDetails
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    RegisterDetails:
      title: RegisterDetails
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    Profile:
      title: Profile
      type: object
      properties:
        featured_deck:
          $ref: "#/components/schemas/DeckDetails"
    Friends:
      title: Friends
      type: array
      description: array of friends user ids
      items:
        type: object
        $ref: "#/components/schemas/User"
    PackCardSlot:
      title: PackCardSlot
      type: object
      required:
        - rarityWeights
      properties:
        rarityWeights:
          type: array
          items:
            type: object
            required:
              - rarity
              - weight
            properties:
              rarity:
                type: integer
              weight:
                type: number
                description: |-
                  weights for each rarity will be summed,
                  the proportion of the total will be the
                  probablity of getting a card with that rarity

                  missing rarities will assume a weight of 0
    PackCreator:
      title: PackCreator
      type: object
      required:
        - contents
      properties:
        contents:
          type: array
          description: |
            array of card ids
          items:
            type: integer
        slots:
          type: array
          description: ordered list of card slots
          items:
            $ref: "#/components/schemas/PackCardSlot"
        pack_details:
          $ref: "#/components/schemas/Pack"
  parameters: {}
tags:
  - name: cards
  - name: decks
  - name: packs
  - name: profiles
  - name: friends
