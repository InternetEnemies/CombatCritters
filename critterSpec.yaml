openapi: 3.1.0
info:
  title: critterSpec
  summary: ""
  version: 0.1.3
  x-fiddle-import-file: true
servers:
  - url: http://localhost:8080
  - url: http://api.combatcritters.ca:4000
paths:
  /cards:
    get:
      tags:
        - cards
      summary: Get cards
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
                title: GetCardsOk
          description: OK
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: integer
          description: (optional) array of card ids to get
        - in: query
          name: order
          schema:
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
            type: string
          description: order of the cards
        - in: query
          name: rarities
          schema:
            type: array
            items:
              type: number
          description: rarities
        - in: query
          name: costLess
          schema:
            type: boolean
          description: filter by less than cost
        - in: query
          name: cost
          schema:
            type: number
          description: cost to filter by
        - in: query
          name: rarityInclude
          schema:
            type: boolean
          description: set high to only include the rarities set
        - in: query
          name: owned
          schema:
            type: string
          description: show only owned cards
      operationId: get-cards
      requestBody:
        content: {}
  /packs:
    get:
      tags:
        - packs
      summary: Get the list of packs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Pack"
                title: GetPacksOk
          description: OK
      operationId: get-packs
  /vendors:
    get:
      tags:
        - market
      summary: Get vendors
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Vendor"
                title: GetVendorsOk
          description: OK - Successful request with response body
      operationId: getVendors
  /admin/users:
    get:
      tags:
        - users
      summary: get all users
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: GetAllUsersOk
                description: "array of users "
          description: OK - Successful request with response body
      operationId: getAllUsers
  /cards/{cardid}:
    get:
      tags:
        - cards
      summary: Get a card by its id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
                type: object
          description: OK
      operationId: get-cards-cardid
    parameters:
      - in: path
        name: cardid
        schema:
          type: string
        required: true
  /decks/validity:
    get:
      tags:
        - decks
      summary: Get the deck validity rules object
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckRules"
                type: object
          description: OK
      operationId: get-decks-validity
  /packs/{packid}:
    get:
      tags:
        - packs
      summary: get a pack from it's id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pack"
                type: object
          description: OK
      operationId: get-packs-packid
    parameters:
      - in: path
        name: packid
        schema:
          type: string
        required: true
  /users/auth/login:
    post:
      tags:
        - auth
      summary: Login
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
                type: object
          description: OK
      parameters: []
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDetails"
              type: object
  /users/auth/logout:
    post:
      tags:
        - auth
      summary: Logout
      responses: {}
      parameters: []
      operationId: logout
  /users/auth/register:
    post:
      tags:
        - auth
      summary: Register
      responses: {}
      parameters: []
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDetails"
              type: object
  /admin/users/{userid}:
    delete:
      tags:
        - users
      summary: Delete user
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
      parameters:
        - $ref: "#/components/parameters/userid"
      operationId: deleteUser
  /users/{userid}/cards:
    get:
      tags:
        - cards
      summary: get the cards in the users inventory
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    item:
                      $ref: "#/components/schemas/Card"
                    count:
                      type: integer
                title: GetUsersUseridCardsOk
          description: OK
      parameters:
        - in: query
          name: id
          schema:
            type: array
            items:
              type: integer
          description: (optional) array of card ids to get
        - in: query
          name: order
          schema:
            enum:
              - ID
              - NAME
              - PLAY_COST
              - RARITY
            type: string
          description: order of the cards
        - in: query
          name: rarityInclude
          schema:
            type: boolean
          description: set high to only include rarities in set
        - in: query
          name: costLess
          schema:
            type: boolean
          description: show cards with cost less than cost
        - in: query
          name: cost
          schema:
            type: number
          description: cost of cards to filter by
        - in: query
          name: rarities
          schema:
            type: array
            items:
              type: number
          description: list of rarities
        - in: query
          name: owned
          schema:
            type: string
          description: show only owned cards
      operationId: get-users-userid-cards
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /users/{userid}/decks:
    get:
      tags:
        - decks
      summary: Get a list of a users decks
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DeckDetails"
                title: GetUsersUseridDecksOk
          description: OK
      operationId: get-users-userid-decks
    post:
      tags:
        - decks
      summary: Create a new deck
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckDetails"
                type: object
          description: Created
      operationId: post-users-userid-decks
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DeckDetails"
              type: object
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /users/{userid}/packs:
    get:
      tags:
        - packs
      summary: Get the packs in the users inventory
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    item:
                      $ref: "#/components/schemas/Pack"
                    count:
                      type: integer
                title: GetUsersUseridPacksOk
          description: OK
      operationId: get-users-userid-packs
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /users/{userid}/wallet:
    get:
      tags:
        - walllet
      summary: get the users wallet
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Wallet"
          description: OK - Successful request with response body
      parameters:
        - $ref: "#/components/parameters/userid"
      description: by force
      operationId: getTheUsersWallet
  /users/{userid}/friends:
    get:
      tags:
        - friends
      summary: get a users friends
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsOk
          description: OK
      operationId: get-users-userid-friends
    post:
      tags:
        - friends
      summary: add friend
      responses: {}
      operationId: post-users-userid-friends
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /users/{userid}/profile:
    get:
      tags:
        - profiles
      summary: Get a users profile
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Profile"
                type: object
          description: OK
      operationId: get-users-userid-profile
    put:
      tags:
        - profiles
      summary: update a users profile
      responses:
        "200":
          content: {}
          description: OK
      operationId: put-users-userid-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
              type: object
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /packs/{packid}/contents:
    get:
      tags:
        - packs
      summary: get pack contents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackContents"
          description: OK
      operationId: get-packs-packid-contents
    parameters:
      - in: path
        name: packid
        schema:
          type: string
        required: true
  /vendors/{vendorid}/offers:
    get:
      tags:
        - market
      summary: get a vendors offers
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Offer"
                title: GetAVendorsOffersOk
          description: OK - Successful request with response body
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: getAVendorsOffers
    post:
      tags:
        - market
      summary: create new offer
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
          description: Created - Resource successfully created
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: createNewOffer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
        required: true
        description: ""
  /vendors/{vendorid}/specials:
    get:
      tags:
        - market
      summary: get special offers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
          description: OK - Successful request with response body
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: getSpecialOffers
    post:
      tags:
        - market
      summary: add new special
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Offer"
          description: Created - Resource successfully created
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: addNewSpecial
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Offer"
        required: true
        description: ""
  /vendors/{vendorid}/discounts:
    get:
      tags:
        - market
      summary: get discounts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferDiscount"
          description: OK - Successful request with response body
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: getDiscounts
    post:
      tags:
        - market
      summary: add new discount
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OfferDiscount"
          description: Created - Resource successfully created
      parameters:
        - $ref: "#/components/parameters/vendorid"
      operationId: addNewDiscount
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ OfferDiscountCreate"
        required: true
        description: Discount creator
  /users/{userid}/decks/{deckid}:
    delete:
      tags:
        - decks
      summary: Delete a deck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckDetails"
                type: object
          description: OK
      operationId: delete-users-userid-decks-deckid
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
      - in: path
        name: deckid
        schema:
          type: string
        required: true
  /users/{userid}/packs/{packid}:
    post:
      tags:
        - packs
      summary: open the pack from its id
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PackResult"
                type: object
          description: OK
      operationId: post-users-userid-packs-packid
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
      - in: path
        name: packid
        schema:
          type: string
        required: true
  /users/{userid}/friends/pending:
    get:
      tags:
        - friends
      summary: get pending friend requests
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
                title: GetUsersUseridFriendsPendingOk
          description: OK
      operationId: get-users-userid-friends-pending
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
  /users/{userid}/decks/{deckid}/cards:
    get:
      tags:
        - decks
      summary: Get the cards in a deck
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Card"
                title: GetUsersUseridDecksDeckidCardsOk
          description: OK
      operationId: get-users-userid-decks-deckid-cards
    put:
      tags:
        - decks
      summary: Update the contents of a deck
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
                title: PutUsersUseridDecksDeckidCardsOk
                properties:
                  deck:
                    $ref: "#/components/schemas/Deck"
                  deck_validity:
                    $ref: "#/components/schemas/DeckValidity"
          description: OK
      parameters: []
      operationId: put-users-userid-decks-deckid-cards
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deck"
              type: object
    parameters:
      - in: path
        name: userid
        schema:
          type: string
        required: true
      - in: path
        name: deckid
        schema:
          type: string
        required: true
  /vendors/{vendorid}/offers/{offerid}:
    post:
      tags:
        - market
      summary: purchase vendor offer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RepChange"
          description: Offer Purchased
      parameters:
        - $ref: "#/components/parameters/vendorid"
        - $ref: "#/components/parameters/offerid"
      operationId: purchaseVendorOffer
  /users/{cardid}/decks/{deckid}/validity:
    get:
      tags:
        - decks
      summary: get the validity object for a deck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeckValidity"
                type: object
          description: OK
      operationId: get-users-cardid-decks-deckid-validity
    parameters:
      - in: path
        name: cardid
        schema:
          type: string
        required: true
      - in: path
        name: deckid
        schema:
          type: string
        required: true
  /admin/packs:
    post:
      tags:
        - packs
      summary: Create new pack
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pack"
                type: object
          description: Created
      operationId: createNewPack
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PackCreator"
        required: true
        description: Pack creation details
      parameters: []
components:
  schemas:
    Card:
      type: object
      title: Card
      required:
        - name
        - playcost
        - rarity
        - image
        - type
        - type_specific
        - description
      properties:
        name:
          type: string
        type:
          enum:
            - critter
            - item
        image:
          type: string
          format: uri
        cardid:
          type: integer
        rarity:
          type: integer
        playcost:
          type: integer
        description:
          type: string
        type_specific:
          type: object
          anyOf:
            - $ref: "#/components/schemas/CardCritter"
            - $ref: "#/components/schemas/CardItem"
          oneOf:
            - type: object
    Deck:
      type: object
      title: Deck
      required:
        - cards
      properties:
        cards:
          type: array
          items:
            type: integer
          description: ordered list of cards in the deck
    Pack:
      type: object
      title: Pack
      required:
        - name
        - image
      properties:
        name:
          type: string
        image:
          type: string
          format: uri
        packid:
          type: integer
    User:
      type: object
      title: User
      examples:
        - id: 142
          email: alice.smith@gmail.com
          lastName: Smith
          firstName: Alice
          signUpDate: 2019-08-24
          dateOfBirth: 1997-10-31
          emailVerified: true
      required:
        - username
        - id
      properties:
        id:
          type: integer
        username:
          type: string
    Offer:
      type: object
      required:
        - give
        - receive
      properties:
        id:
          type: integer
          description: id of the offer
        give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
          description: items being given
        receive:
          $ref: "#/components/schemas/OfferItem"
      description: object represent an exchange offer, either market or trade
    Vendor:
      type: object
      required:
        - name
        - id
        - reputation
        - image
        - refresh_time
      properties:
        id:
          type: integer
        name:
          type: string
          description: name of the vendor
        image:
          type: string
          description: url of the vendor image
        reputation:
          $ref: "#/components/schemas/VendorReputation"
        refresh_time:
          type: string
          description: datetime of refresh
    Wallet:
      type: object
      required:
        - coins
      properties:
        coins:
          type: integer
    Friends:
      type: array
      items:
        $ref: "#/components/schemas/User"
        type: object
      title: Friends
      description: array of friends user ids
    Profile:
      type: object
      title: Profile
      properties:
        featured_deck:
          $ref: "#/components/schemas/DeckDetails"
    CardItem:
      type: object
      title: CardItem
      required:
        - abilityid
      properties:
        abilityid:
          type: integer
    DeckRules:
      type: object
      title: DeckRules
      required:
        - min_cards
        - max_cards
        - limit_legend
        - limit_epic
        - limit_rare
        - limit_item
      properties:
        max_cards:
          type: integer
        min_cards:
          type: integer
        limit_epic:
          type: integer
        limit_item:
          type: integer
        limit_rare:
          type: integer
        limit_legend:
          type: integer
    OfferItem:
      type: object
      required:
        - type
        - cost
        - item
        - quantity
        - count
      properties:
        type:
          enum:
            - card
            - pack
            - currency
          type: string
          description: type of the item
        count:
          type: integer
          description: amount of the item
        item_id:
          type: integer
          description: id of the pack or card, null if currency type
    RepChange:
      type: object
      required:
        - vendor
        - amount
      properties:
        amount:
          type: integer
          description: xp change
        vendor:
          type: integer
          description: id of the vendor
      description: |
        object representing the reputation/xp change for a vendor
    PackResult:
      type: object
      title: PackResult
      properties:
        cards:
          type: array
          items:
            $ref: "#/components/schemas/Card"
    CardCritter:
      type: object
      title: CardCritter
      required:
        - damage
        - health
        - abilities
      properties:
        damage:
          type: integer
        health:
          type: integer
        abilities:
          type: array
          items:
            type: integer
    DeckDetails:
      type: object
      title: DeckDetails
      required:
        - name
      properties:
        name:
          type: string
        deckid:
          type: integer
    PackCreator:
      type: object
      title: PackCreator
      required:
        - contents
      properties:
        slots:
          type: array
          items:
            $ref: "#/components/schemas/PackCardSlot"
          description: ordered list of card slots
        contents:
          type: array
          items:
            type: integer
          description: |
            array of card ids
        pack_details:
          $ref: "#/components/schemas/Pack"
      description: |
        object for creating packs
    DeckValidity:
      type: object
      title: DeckValidity
      required:
        - isvalid
      properties:
        issues:
          type: array
          items:
            type: string
          description: list of issues if the deck is invalid
        isvalid:
          type: boolean
    LoginDetails:
      type: object
      title: LoginDetails
      required:
        - username
        - password
      properties:
        password:
          type: string
        username:
          type: string
    PackCardSlot:
      type: object
      title: PackCardSlot
      required:
        - rarityWeights
      properties:
        rarityWeights:
          type: array
          items:
            type: object
            required:
              - rarity
              - weight
            properties:
              rarity:
                type: integer
                description: rarity id
              weight:
                type: number
                description: |-
                  weights for each rarity will be summed,
                  the proportion of the total will be the
                  probablity of getting a card with that rarity

                  missing rarities will assume a weight of 0
          description: array of weights for rarities in this slot
      description: A single slot in a pack of cards
    PackContents:
      type: array
      items:
        $ref: "#/components/schemas/Card"
      description: cards in the pack
    OfferDiscount:
      type: object
      required:
        - discount
        - dicounted_give
        - parent_offer
        - discountid
        - expiry
      properties:
        discount:
          type: integer
          description: discount percentage (on currency although a required item can also
            be removed)
        discountid:
          type: integer
          description: unique id of this discount
        parent_offer:
          $ref: "#/components/schemas/Offer"
        dicounted_give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
          description: discounted required items
      description: dicounted version of an offer
    RegisterDetails:
      type: object
      title: RegisterDetails
      required:
        - username
        - password
      properties:
        password:
          type: string
        username:
          type: string
    VendorReputation:
      type: object
      required:
        - level
        - xp
        - next
        - prev
        - current
        - current_xp
        - xp_to_next
        - prev
        - next_level_xp
        - prev_level_xp
      properties:
        level:
          type: integer
          description: current level the user has reached with this vendor
        current_xp:
          type: integer
          description: total current xp the user has for this vendor
        next_level_xp:
          type: integer
          description: amount of xp needed to reach the next level
        prev_level_xp:
          type: integer
          description: amount of xp that was needed for the previous level
      description: reputation object for a vendor
    " OfferDiscountCreate":
      type: object
      required:
        - offerid
        - dicounted_give
        - discount
      properties:
        offerid:
          type: integer
        discount:
          type: integer
        dicounted_give:
          type: array
          items:
            $ref: "#/components/schemas/OfferItem"
      description: creation object for discounts
      x-fiddle-dto-info:
        baseSchemaName: OfferDiscount
  responses:
    NoContent:
      content:
        application/json:
          schema:
            type: "null"
      description: The request was successful, but there is no content to return in
        the response.
  parameters:
    userid:
      in: path
      name: userid
      schema:
        type: string
      required: true
    offerid:
      in: path
      name: offerid
      schema:
        type: string
      required: true
    vendorid:
      in: path
      name: vendorid
      schema:
        type: string
      required: true
tags:
  - name: cards
  - name: decks
  - name: packs
  - name: profiles
  - name: friends
  - name: auth
  - name: market
  - name: walllet
  - name: users
